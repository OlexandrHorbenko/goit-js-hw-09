{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAcC,SAASC,cAAc,SA2B3C,SAASC,GAAqBC,SAAEA,EAAQC,MAAEA,IACxCC,EAAAR,GAASS,OAAOC,QAAQ,uBAAqBJ,QAAiBC,M,CAGhE,SAASI,GAAmBL,SAAEA,EAAQC,MAAEA,IACtCC,EAAAR,GAASS,OAAOG,QAAQ,sBAAoBN,QAAeC,M,CAG7D,SAASM,EAAcP,EAAUC,GAE/B,OADAO,QAAQC,IAAI,oBAAoBT,gBAAuBC,OAChD,IAAIS,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEX,E,MAAUC,IAEpBW,EAAO,C,SAAEZ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA5CbL,EAAYoB,iBAAiB,UAAWC,IACtCA,EAAMC,iBACN,MAAMjB,MAAEA,EAAKkB,KAAEA,EAAIC,OAAEA,GAIvB,SAAuBC,GACrB,MAAMC,EAAaD,EAAKvB,cAAc,uBAChCyB,EAAYF,EAAKvB,cAAc,sBAC/B0B,EAAcH,EAAKvB,cAAc,wBAEvC,MAAO,CACLG,MAAOwB,SAASH,EAAWI,OAC3BP,KAAMM,SAASF,EAAUG,OACzBN,OAAQK,SAASD,EAAYE,O,CAZCC,CAAc/B,IAgBhD,SAAwBK,EAAOkB,EAAMC,GACnC,IAAK,IAAIQ,EAAI,EAAGA,GAAKR,EAAQQ,GAAK,EAChCrB,EAAcqB,EAAG3B,GAAS2B,EAAI,GAAKT,GAChCU,MAAMC,GAAW/B,EAAqB+B,KACtCC,OAAOC,GAAU3B,EAAmB2B,I,CAnBzCC,CAAehC,EAAOkB,EAAMC,EAAO","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formElement = document.querySelector('.form');\nformElement.addEventListener('submit', (event) => {\n  event.preventDefault();\n  const { delay, step, amount } = getFormValues(formElement);\n  handlePromises(delay, step, amount);\n});\n\nfunction getFormValues(form) {\n  const delayInput = form.querySelector('input[name=\"delay\"]');\n  const stepInput = form.querySelector('input[name=\"step\"]');\n  const amountInput = form.querySelector('input[name=\"amount\"]');\n  \n  return {\n    delay: parseInt(delayInput.value),\n    step: parseInt(stepInput.value),\n    amount: parseInt(amountInput.value),\n  };\n}\n\nfunction handlePromises(delay, step, amount) {\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay + (i - 1) * step)\n      .then((result) => handlePromiseSuccess(result))\n      .catch((error) => handlePromiseError(error));\n  }\n}\n\nfunction handlePromiseSuccess({ position, delay }) {\n  Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}\n\nfunction handlePromiseError({ position, delay }) {\n  Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n}\n\nfunction createPromise(position, delay) {\n  console.log(`Creating promise ${position} with delay ${delay}ms`);\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formElement","document","querySelector","$47d4ff9957288465$var$handlePromiseSuccess","position","delay","$parcel$interopDefault","Notify","success","$47d4ff9957288465$var$handlePromiseError","failure","$47d4ff9957288465$var$createPromise","console","log","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","step","amount","form","delayInput","stepInput","amountInput","parseInt","value","$47d4ff9957288465$var$getFormValues","i","then","result","catch","error","$47d4ff9957288465$var$handlePromises"],"version":3,"file":"03-promises.90179d4c.js.map"}