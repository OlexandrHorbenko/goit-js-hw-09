{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAcC,SAASC,cAAc,SAoD3C,SAASC,EAAqBC,G,IAAEC,EAAFD,EAAEC,SAAUC,EAAZF,EAAYE,MACxCC,EAAAT,GAASU,OAAOC,QAAQ,uBAAwCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,CAGxE,SAASK,EAAmBP,G,IAAEC,EAAFD,EAAEC,SAAUC,EAAZF,EAAYE,MACtCC,EAAAT,GAASU,OAAOI,QAAQ,sBAAqCF,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,CAGrE,SAASO,EAAcR,EAAUC,EAAOQ,GAExC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAYC,YAAYC,OAC9B,SAASC,IACaF,YAAYC,MACFF,GACfZ,EACSgB,KAAKC,SAAW,GAEpCP,EAAQ,CAAEX,WAAUC,UAEpBW,EAAO,CAAEZ,WAAUC,UAGrBkB,sBAAsBH,E,CAG1BA,E,IA5EJrB,EAAYyB,iBAAiB,UAAU,SAAAC,GACrCA,EAAMC,iBACN,IAIqBC,EACfC,EACAC,EACAC,EAP0BC,GAK1BH,GADeD,EAJyB5B,GAKtBE,cAAc,uBAChC4B,EAAYF,EAAK1B,cAAc,sBAC/B6B,EAAcH,EAAK1B,cAAc,wBAChC,CACLI,MAAO2B,SAASJ,EAAWK,OAC3BpB,KAAMmB,SAASH,EAAUI,OACzBC,OAAQF,SAASF,EAAYG,UAIjC,SAAwB5B,EAAOQ,EAAMqB,GACnC,IAAIC,GAAqB,EAEzBvB,EAAc,EADYP,GAEvB+B,MAAK,SAAAC,G,OAAUnC,EAAqBmC,E,IACpCC,OAAM,SAAAC,G,OAAS7B,EAAmB6B,E,IAErC,IAAIC,EAAI,EACFC,EAAaC,aAAY,WACzBF,GAAKN,GACPtB,EAAc4B,EAAGnC,GAASmC,EAAI,GAAK3B,GAChCuB,MAAK,SAAAC,G,OAAUnC,EAAqBmC,E,IACpCC,OAAM,SAAAC,G,OAAS7B,EAAmB6B,E,KACrCC,GAAK,GACGN,IACNC,GAAqB,IAGvBQ,cAAcF,E,GAEf5B,GAGH+B,YAAW,WACJT,IACHvB,EAAcsB,EAAQ7B,GAAS6B,EAAS,GAAKrB,GAC1CuB,MAAK,SAAAC,G,OAAUnC,EAAqBmC,E,IACpCC,OAAM,SAAAC,G,OAAS7B,EAAmB6B,E,IACrCJ,GAAqB,E,GANA9B,GAAS6B,EAAS,GAAKrB,E,CApChDgC,CADgCd,EAAxB1B,MAAwB0B,EAAjBlB,KAAiBkB,EAAXG,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formElement = document.querySelector('.form');\n\nformElement.addEventListener('submit', event => {\n  event.preventDefault();\n  const { delay, step, amount } = getFormValues(formElement);\n  handlePromises(delay, step, amount);\n});\n\nfunction getFormValues(form) {\n  const delayInput = form.querySelector('input[name=\"delay\"]');\n  const stepInput = form.querySelector('input[name=\"step\"]');\n  const amountInput = form.querySelector('input[name=\"amount\"]');\n  return {\n    delay: parseInt(delayInput.value),\n    step: parseInt(stepInput.value),\n    amount: parseInt(amountInput.value),\n  };\n}\n\nfunction handlePromises(delay, step, amount) {\n  let lastPromiseCreated = false;\n  const firstPromiseDelay = delay;\n  createPromise(1, firstPromiseDelay)\n    .then(result => handlePromiseSuccess(result))\n    .catch(error => handlePromiseError(error));\n\n  let i = 2;\n  const intervalId = setInterval(() => {\n    if (i <= amount) {\n      createPromise(i, delay + (i - 1) * step)\n        .then(result => handlePromiseSuccess(result))\n        .catch(error => handlePromiseError(error));\n      i += 1;\n      if (i > amount) {\n        lastPromiseCreated = true;\n      }\n    } else {\n      clearInterval(intervalId);\n    }\n  }, step);\n\n  const lastPromiseDelay = delay + (amount - 1) * step;\n  setTimeout(() => {\n    if (!lastPromiseCreated) {\n      createPromise(amount, delay + (amount - 1) * step)\n        .then(result => handlePromiseSuccess(result))\n        .catch(error => handlePromiseError(error));\n      lastPromiseCreated = true;\n    }\n  }, lastPromiseDelay);\n}\n\nfunction handlePromiseSuccess({ position, delay }) {\n  Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}\n\nfunction handlePromiseError({ position, delay }) {\n  Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n}\n\nfunction createPromise(position, delay, step) {\n  // console.log(`Creating promise ${position} with delay ${delay}ms`);\nreturn new Promise((resolve, reject) => {\n    const startTime = performance.now();\n    function checkTime() {\n      const currentTime = performance.now();\n      const elapsed = currentTime - startTime;\n      if (elapsed >= delay) {\n        const shouldResolve = Math.random() > 0.3;\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      } else {\n        requestAnimationFrame(checkTime);\n      }\n    }\n    checkTime();\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formElement","document","querySelector","$ce04d3a99e08e73b$var$handlePromiseSuccess","param","position","delay","$parcel$interopDefault","Notify","success","concat","$ce04d3a99e08e73b$var$handlePromiseError","failure","$ce04d3a99e08e73b$var$createPromise","step","Promise","resolve","reject","startTime","performance","now","checkTime","Math","random","requestAnimationFrame","addEventListener","event","preventDefault","form","delayInput","stepInput","amountInput","ref","parseInt","value","amount","lastPromiseCreated","then","result","catch","error","i","intervalId","setInterval","clearInterval","setTimeout","$ce04d3a99e08e73b$var$handlePromises"],"version":3,"file":"03-promises.24dcbf85.js.map"}