{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAcC,SAASC,cAAc,SAoD3C,SAASC,GAAqBC,SAAEA,EAAQC,MAAEA,IACxCC,EAAAR,GAASS,OAAOC,QAAQ,uBAAqBJ,QAAiBC,M,CAGhE,SAASI,GAAmBL,SAAEA,EAAQC,MAAEA,IACtCC,EAAAR,GAASS,OAAOG,QAAQ,sBAAoBN,QAAeC,M,CAG7D,SAASM,EAAcP,EAAUC,EAAOO,GAExC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzB,MAAMC,EAAYC,YAAYC,OAC9B,SAASC,IAGP,GAFoBF,YAAYC,MACFF,GACfX,EAAO,CACEe,KAAKC,SAAW,GAEpCP,EAAQ,C,SAAEV,E,MAAUC,IAEpBU,EAAO,C,SAAEX,E,MAAUC,G,MAGrBiB,sBAAsBH,E,CAG1BA,EAAW,G,CA5EfnB,EAAYuB,iBAAiB,UAAUC,IACrCA,EAAMC,iBACN,MAAMpB,MAAEA,EAAKO,KAAEA,EAAIc,OAAEA,GAIvB,SAAuBC,GACrB,MAAMC,EAAaD,EAAKzB,cAAc,uBAChC2B,EAAYF,EAAKzB,cAAc,sBAC/B4B,EAAcH,EAAKzB,cAAc,wBACvC,MAAO,CACLG,MAAO0B,SAASH,EAAWI,OAC3BpB,KAAMmB,SAASF,EAAUG,OACzBN,OAAQK,SAASD,EAAYE,O,CAXCC,CAAcjC,IAehD,SAAwBK,EAAOO,EAAMc,GACnC,IAAIQ,GAAqB,EAEzBvB,EAAc,EADYN,GAEvB8B,MAAKC,GAAUjC,EAAqBiC,KACpCC,OAAMC,GAAS7B,EAAmB6B,KAErC,IAAIC,EAAI,EACR,MAAMC,EAAaC,aAAY,KACzBF,GAAKb,GACPf,EAAc4B,EAAGlC,GAASkC,EAAI,GAAK3B,GAChCuB,MAAKC,GAAUjC,EAAqBiC,KACpCC,OAAMC,GAAS7B,EAAmB6B,KACrCC,GAAK,EACDA,EAAIb,IACNQ,GAAqB,IAGvBQ,cAAcF,EAAW,GAE1B5B,GAGH+B,YAAW,KACJT,IACHvB,EAAce,EAAQrB,GAASqB,EAAS,GAAKd,GAC1CuB,MAAKC,GAAUjC,EAAqBiC,KACpCC,OAAMC,GAAS7B,EAAmB6B,KACrCJ,GAAqB,E,GANA7B,GAASqB,EAAS,GAAKd,E,CApChDgC,CAAevC,EAAOO,EAAMc,EAAO","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formElement = document.querySelector('.form');\n\nformElement.addEventListener('submit', event => {\n  event.preventDefault();\n  const { delay, step, amount } = getFormValues(formElement);\n  handlePromises(delay, step, amount);\n});\n\nfunction getFormValues(form) {\n  const delayInput = form.querySelector('input[name=\"delay\"]');\n  const stepInput = form.querySelector('input[name=\"step\"]');\n  const amountInput = form.querySelector('input[name=\"amount\"]');\n  return {\n    delay: parseInt(delayInput.value),\n    step: parseInt(stepInput.value),\n    amount: parseInt(amountInput.value),\n  };\n}\n\nfunction handlePromises(delay, step, amount) {\n  let lastPromiseCreated = false;\n  const firstPromiseDelay = delay;\n  createPromise(1, firstPromiseDelay)\n    .then(result => handlePromiseSuccess(result))\n    .catch(error => handlePromiseError(error));\n\n  let i = 2;\n  const intervalId = setInterval(() => {\n    if (i <= amount) {\n      createPromise(i, delay + (i - 1) * step)\n        .then(result => handlePromiseSuccess(result))\n        .catch(error => handlePromiseError(error));\n      i += 1;\n      if (i > amount) {\n        lastPromiseCreated = true;\n      }\n    } else {\n      clearInterval(intervalId);\n    }\n  }, step);\n\n  const lastPromiseDelay = delay + (amount - 1) * step;\n  setTimeout(() => {\n    if (!lastPromiseCreated) {\n      createPromise(amount, delay + (amount - 1) * step)\n        .then(result => handlePromiseSuccess(result))\n        .catch(error => handlePromiseError(error));\n      lastPromiseCreated = true;\n    }\n  }, lastPromiseDelay);\n}\n\nfunction handlePromiseSuccess({ position, delay }) {\n  Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}\n\nfunction handlePromiseError({ position, delay }) {\n  Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n}\n\nfunction createPromise(position, delay, step) {\n  // console.log(`Creating promise ${position} with delay ${delay}ms`);\nreturn new Promise((resolve, reject) => {\n    const startTime = performance.now();\n    function checkTime() {\n      const currentTime = performance.now();\n      const elapsed = currentTime - startTime;\n      if (elapsed >= delay) {\n        const shouldResolve = Math.random() > 0.3;\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      } else {\n        requestAnimationFrame(checkTime);\n      }\n    }\n    checkTime();\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formElement","document","querySelector","$47d4ff9957288465$var$handlePromiseSuccess","position","delay","$parcel$interopDefault","Notify","success","$47d4ff9957288465$var$handlePromiseError","failure","$47d4ff9957288465$var$createPromise","step","Promise","resolve","reject","startTime","performance","now","checkTime","Math","random","requestAnimationFrame","addEventListener","event","preventDefault","amount","form","delayInput","stepInput","amountInput","parseInt","value","$47d4ff9957288465$var$getFormValues","lastPromiseCreated","then","result","catch","error","i","intervalId","setInterval","clearInterval","setTimeout","$47d4ff9957288465$var$handlePromises"],"version":3,"file":"03-promises.e6688164.js.map"}